@startuml backend

package domain <<Frame>> {
    enum TraqUserState {}

    class User {
        + UUID id
        + String name
        + boolean privileged

        ' traQ依存
        + String displayName
        + TraqUserState traqState
        + Time updatedAt
    }

    enum GroupType {
        GroupTypeTraq
        GroupTypeKnoq
    }

    interface Group {
        + UUID id
        + GroupType groupType

        ' traQ依存
        + String name
        + Time updatedAt
    }

    class TraqGroup implements Group {
        + UUID traqID
    }

    class KnoqGroup implements Group {
        + boolean joinFree
    }

    enum MembershipType {
        Admin
        Member
    }

    class Membership {
        ' traQ依存
        + MembershipType membershipType

        ' Group の updatedAt でこと足りるかもしれない
        + Time updatedAt
    }
    ' traQ依存
    Group --|> "0..*" Membership : members
    Membership --|> "1" User : user

    enum EventType {
        EventTypeRoom
        EventTypePrivate
    }

    interface Event {
        + UUID id
        + String name
        + Time startAt
        + Time endAt
        + EventType eventType
        + String venueName
    }

    class RoomEvent implements Event {
        + boolean shareable
    }

    class PrivateEvent implements Event {
    }

    enum ParticipationState {
        Unconfirmed
        Attend
        Absent
    }

    class Participation {
        + ParticipationState participationState
    }

    Event --|> "1" Group : group
    Event --|> "1" User : createdBy
    Event --|> "1..*" User : eventAdmins

    ' traQ 依存
    Event --|> "0..*" Participation : participations
    Participation --|> "1" User : user

    class Room {
        + UUID id
        + String name
        + Time startAt
        + Time endAt
    }

    Room --|> "0..*" RoomEvent : 借りている講義室で開催されるイベント
    Room --|> "1" User : createdBy


    class Tag {
        + UUID id
        + String name
    }
    Event --|> "0..*" Tag : tags
}

package infra <<Frame>> {
package db <<Frame>> {
    class DBUser {
        + UUID id
        + String name
        + boolean privileged

        ' traQ依存
        + String displayName
        + TraqUserState traqState
        + Time updatedAt
    }

    class DBGroup {
        + UUID id
        + GroupType groupType

        + Optional<UUID> traqID

        + Optional<boolean> joinFree

        ' traQ依存
        + String name
        + Time updatedAt
    }

    class DBMembership {
        + UUID userID
        + UUID groupID

        ' traQ依存
        + MembershipType membershipType
        + Time updatedAt
    }

    ' reference groupID
    DBGroup --|> "0..*" DBMembership : members
    ' foreignKey userID
    DBMembership --|> "1" DBUser : user

    class DBEvent {
        + UUID id
        + String name
        + Time startAt
        + Time endAt
        + EventType eventType
        + UUID groupID
        + UUID createdByID

        + Optional<boolean> shareable
        + Optional<UUID> roomID

        + Optional<String> privateVenueName
    }

    class DBParticipant {
        + UUID userID
        + UUID eventID
        + ParticipationState participationState
    }


    ' foreignKey: groupID
    DBEvent --|> "1" DBGroup : group
    ' foreignKey createdByID
    DBEvent --|> "1" DBUser : createdBy
    DBEvent --|> "1..*" DBUser : eventAdmins

    ' foreignKey userID
    DBParticipant --|> "1" DBUser : user

    ' traQ依存
    'reference eventID
    DBEvent --|> DBParticipant : participants

    class DBRoom {
        + UUID id
        + String name
        + Time startAt
        + Time endAt
        + UUID createdByID
    }

    ' foreignKey createdByID
    DBRoom --|> "1" DBUser : createdBy



    ' 循環参照 (最終的には Room の Name だけ欲しい)
    ' RoomEvent のみ Room を保持するため Optional で実装されるべき
    ' foreignKey: roomID
    DBEvent ..|> "0..1" DBRoom : room
    DBRoom ..|> "0..*" DBEvent : events


    class DBTag {
        + UUID id
        + String name
    }

    DBEvent --|> "0..*" DBTag : tags
}
}

@enduml